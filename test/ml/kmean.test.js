const KMean = require('../../src/ml/KMeanCluster');

test('test kmean against the sklearn result', () => {

  const x = [
    [  2.37365349,  -0.88012392,   2.55354795],
    [ -1.83407865,   8.77301886,   9.01864712],
    [  0.12190131,  -0.53119266,   0.98467748],
    [  1.25146839,   3.34303272,   2.4321945 ],
    [ -0.18813694,  -0.88716802,   2.53201892],
    [ -0.75982931,   6.99712905,   9.65441895],
    [  0.40957246,   4.06163781,   3.56965881],
    [  0.41824386,  -1.21554051,   2.14186179],
    [  1.14619429,  -1.55814935,   2.7784083 ],
    [  0.43974124,  -1.10151061,   2.88991108],
    [  0.59543576,   9.36096725,   7.82771963],
    [  0.79468751,   5.71399196,   1.68079583],
    [  0.40675281,   4.47917386,   1.59276198],
    [ -0.87109516,   7.76490279,   9.87741492],
    [ -1.92327761,   7.70267576,   9.89305627],
    [  2.51129921,   4.87022737,   2.20453261],
    [  0.70700768,  -1.07826649,   1.92545249],
    [  0.64321268,   4.35115214,   3.51800797],
    [  1.00970901,   4.98435457,   0.49177083],
    [  2.24238861,   3.79791079,   4.6004683 ],
    [ -0.10200792,   5.6992596 ,   3.84275157],
    [  2.05708199,   4.78809948,   2.634408  ],
    [  0.21888627,  -1.88053187,   2.17713479],
    [ -0.77610678,   8.65537731,  10.18077483],
    [ -1.08759723,   6.9764747 ,   9.06683427],
    [  0.59029885,  -1.89342795,   4.03759422],
    [ -2.49914199,   8.76071077,   8.36846905],
    [  0.671724  ,  -3.18147478,   2.27815962],
    [  0.54291269,   8.00646045,   7.54758386],
    [ -2.23915906,   8.85334007,   9.61484261]
  ];

  const k = new KMean({
    n_clusters: 3,
    random_state: 1,
    n_init: 10,
    max_iter: 100,
  });
  k.fit(x);
  expect(k.error()).toBeCloseTo(41.080586392361525);

  /*
    SKLearn KMean
    error: 41.080586392361525
    [[ 0.64995141 -1.42073862  2.42987667]
    [ 1.12241647  4.60888403  2.65673504]
    [-1.08519373  8.1851057   9.10497615]]
  */
});
